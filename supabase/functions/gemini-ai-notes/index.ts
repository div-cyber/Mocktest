import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization",
}

interface NotesRequest {
  topic: string
  subject: string
  section: 'engineering' | 'medical'
  difficulty: 'easy' | 'medium' | 'hard'
  length: 'short' | 'medium' | 'detailed'
  userId: string
}

serve(async (req: Request) => {
  if (req.method === "OPTIONS") {
    return new Response(null, {
      status: 200,
      headers: corsHeaders,
    })
  }

  try {
    const GEMINI_API_KEY = 'AIzaSyAxetkUwp6bz0tRaZU28Go_0jKBFUEsm-k'
    const SUPABASE_URL = Deno.env.get('SUPABASE_URL')
    const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')

    if (!GEMINI_API_KEY || !SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
      throw new Error('Missing required environment variables')
    }

    const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY)
    const { topic, subject, section, difficulty, length, userId }: NotesRequest = await req.json()

    // Define section-specific context
    const sectionContext = {
      engineering: {
        examName: 'IOE Entrance Examination',
        focus: 'engineering concepts, problem-solving, and technical applications',
        subjects: ['Mathematics', 'Physics', 'Chemistry', 'English'],
        style: 'technical and formula-focused with practical examples'
      },
      medical: {
        examName: 'Medical Entrance Examination',
        focus: 'biological processes, medical concepts, and scientific understanding',
        subjects: ['Biology', 'Chemistry', 'Physics', 'English'],
        style: 'detailed biological explanations with medical relevance'
      }
    }

    const context = sectionContext[section]
    const lengthSpecs = {
      short: '500-800 words with key points and formulas',
      medium: '1000-1500 words with detailed explanations and examples',
      detailed: '2000-3000 words with comprehensive coverage, examples, and practice problems'
    }

    const prompt = `You are an expert educator creating study notes for ${context.examName} preparation in Nepal.

CONTEXT:
- Topic: ${topic}
- Subject: ${subject}
- Section: ${section.toUpperCase()}
- Difficulty Level: ${difficulty}
- Length: ${length} (${lengthSpecs[length]})
- Focus: ${context.focus}
- Style: ${context.style}

REQUIREMENTS:
1. Create comprehensive, well-structured study notes
2. Include relevant formulas, definitions, and key concepts
3. Add practical examples and applications
4. Use clear headings and subheadings
5. Include memory aids and mnemonics where helpful
6. Add practice problems or questions at the end
7. Ensure content is exam-relevant and follows Nepal curriculum
8. Use markdown formatting for better readability

STRUCTURE YOUR NOTES AS FOLLOWS:
# ${topic} - ${subject}

## Overview
Brief introduction to the topic and its importance

## Key Concepts
Main concepts with clear definitions

## Important Formulas/Laws
(If applicable) List all relevant formulas with explanations

## Detailed Explanation
Comprehensive explanation of the topic

## Examples and Applications
Practical examples and real-world applications

## Common Mistakes to Avoid
Typical errors students make

## Practice Problems
Sample questions with solutions

## Quick Review Points
Bullet points for quick revision

## Exam Tips
Specific tips for ${context.examName}

Generate detailed, high-quality study notes that will help students excel in their ${section} entrance exam preparation.`

    const geminiResponse = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{ parts: [{ text: prompt }] }],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 8192,
          },
        }),
      }
    )

    if (!geminiResponse.ok) {
      throw new Error(`Gemini API error: ${geminiResponse.status}`)
    }

    const geminiData = await geminiResponse.json()
    const generatedNotes = geminiData.candidates?.[0]?.content?.parts?.[0]?.text

    if (!generatedNotes) {
      throw new Error('No notes generated by Gemini')
    }

    // Save the generated notes to database
    const { data: savedNote, error: saveError } = await supabase
      .from('ai_notes')
      .insert({
        title: `${topic} - ${subject}`,
        topic,
        content: generatedNotes,
        section,
        subject,
        generated_by: userId,
        is_ai_generated: true,
        difficulty,
        tags: [topic.toLowerCase(), subject.toLowerCase(), difficulty]
      })
      .select()
      .single()

    if (saveError) {
      console.error('Error saving notes:', saveError)
    }

    return new Response(
      JSON.stringify({ 
        notes: generatedNotes,
        savedNote: savedNote,
        success: true
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    )

  } catch (error) {
    console.error('AI Notes generation error:', error)
    return new Response(
      JSON.stringify({ 
        error: error.message || 'Internal server error',
        details: 'Failed to generate AI notes'
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    )
  }
})